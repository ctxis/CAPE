# MIT License
#
# Copyright (c) 2017 Jason Reaves
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Modified for use with CAPE by enzok

import re
import base64
from Crypto.Cipher import ARC4


def decode_str(key, s):
    temp = bytearray(s)
    tkey = bytearray(key)
    for i in range(len(temp)):
        temp[i] ^= tkey[i % len(tkey)]
    return str(temp)


def unintlify(s):
    blob = ""
    for i in range(len(s) / 3):
        temp = s[i * 3:(i * 3) + 3]
        blob += chr(int(temp))
    return blob


def rc4_dc(key, data):
    rc4 = ARC4.new(key)
    return rc4.decrypt(data)


def find_fullkey(data, output, key):
    out = ""
    for i in range(min(len(data), len(output))):
        out += chr(ord(data[i]) ^ ord(output[i]))
    temp = out[1:].find(key[:2])
    if temp == -1:
        return None
    return out[:temp + 1]


def more_eggs_decode(scriptdata):
    data = scriptdata.decode("utf-16").replace("\x00", "")
    poss_keys = re.findall('''"[a-zA-Z][a-zA-Z0-9]{20,50}"''', data)
    poss_outputs = re.findall('''"[a-zA-Z0-9]{80,200}"''', data)
    key = None
    poss_keys = map(lambda x: x.strip('"'), poss_keys)
    poss_outputs = map(lambda x: x.strip('"'), poss_outputs)
    script_out = dict()
    for poss_key in poss_keys:
        for poss_output in poss_outputs:
            begin_str = re.findall('''"[0-9]{''' + str(len(poss_output) * 3) + '''}"''', data)
            if not begin_str:
                continue
            begin_str = begin_str[0].strip('"')
            blob = unintlify(begin_str)
            test_key = find_fullkey(blob, poss_output, poss_key)
        if test_key:
            key = test_key
            break
        if key:
            break

    if key:
        try:
            third_layer = re.findall('''"={0,2}[a-zA-Z0-9\+]+/[a-zA-Z0-9\/\+]+={0,2}"''', data)[0].strip('"')
        except:
            return

        try:
            second_layer = re.findall('''"[0-9]{500,}"''', data)[0].strip('"')
        except:
            second_layer = None
            tkey = key
            # return None

        if second_layer:
            second_layer = unintlify(second_layer)
            second_layer_decoded = decode_str(key, second_layer)
            poss_keys = re.findall('''"[a-zA-Z0-9]+"''', second_layer_decoded)
            poss_keys = map(lambda x: x.strip('"'), poss_keys)
            temp = base64.b64decode(third_layer)
            for test_key in poss_keys:
                blob = rc4_dc(test_key, temp)
                if 'ActiveXObject' in blob:
                    script_out["data"] = blob
                    script_out["datatype"] = "text"
                    script_out["type"] = "more_eggs"
                    break
                if 'This program cannot' in blob:
                    script_out["data"] = blob
                    script_out["datatype"] = "binary"
                    script_out["type"] = "more_eggs"
                    break
        # look for third layer and decode with key
        else:
            temp = base64.b64decode(third_layer[::-1])
            third_layer_decoded = decode_str(tkey + '\x00', temp)
            script_out["data"] = third_layer_decoded
            script_out["datatype"] = "text"
            script_out["type"] = "more_eggs"

    return script_out


def config(task_info, data):
    decode_data = dict()
    decode_data["type"] = None
    decode_data = more_eggs_decode(data)
    if decode_data and "more_eggs" in decode_data["type"]:
        return decode_data
    return decode_data
